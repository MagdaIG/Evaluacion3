/*
 * API de Energy and Water
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.57
 *
 * Do not edit the class manually.
 *
 */
import ApiClient from "../ApiClient";
import CategoriaServicioIdBody from '../model/CategoriaServicioIdBody';
import CategoriaServicioIdBody1 from '../model/CategoriaServicioIdBody1';
import EquipoIdBody from '../model/EquipoIdBody';
import EquipoIdBody1 from '../model/EquipoIdBody1';
import HistoriaIdBody from '../model/HistoriaIdBody';
import HistoriaIdBody1 from '../model/HistoriaIdBody1';
import InfoContactoIdBody from '../model/InfoContactoIdBody';
import InfoContactoIdBody1 from '../model/InfoContactoIdBody1';
import MantenimientoInfoIdBody from '../model/MantenimientoInfoIdBody';
import MantenimientoInfoIdBody1 from '../model/MantenimientoInfoIdBody1';
import PreguntaFrecuenteIdBody from '../model/PreguntaFrecuenteIdBody';
import PreguntaFrecuenteIdBody1 from '../model/PreguntaFrecuenteIdBody1';
import V1CategoriaServicioBody from '../model/V1CategoriaServicioBody';
import V1EquipoBody from '../model/V1EquipoBody';
import V1HistoriaBody from '../model/V1HistoriaBody';
import V1InfoContactoBody from '../model/V1InfoContactoBody';
import V1MantenimientoInfoBody from '../model/V1MantenimientoInfoBody';
import V1PreguntaFrecuenteBody from '../model/V1PreguntaFrecuenteBody';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addCategoriaServicio operation.
     * @callback moduleapi/DefaultApi~addCategoriaServicioCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Agregar una nueva categoría de servicio
     * @param {module:model/V1CategoriaServicioBody} body 
     * @param {module:api/DefaultApi~addCategoriaServicioCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addCategoriaServicio(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addCategoriaServicio");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/categoria_servicio', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the addEquipo operation.
     * @callback moduleapi/DefaultApi~addEquipoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Agregar un nuevo equipo
     * @param {module:model/V1EquipoBody} body 
     * @param {module:api/DefaultApi~addEquipoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addEquipo(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addEquipo");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/equipo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the addHistoria operation.
     * @callback moduleapi/DefaultApi~addHistoriaCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Agregar una nueva historia
     * @param {module:model/V1HistoriaBody} body 
     * @param {module:api/DefaultApi~addHistoriaCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addHistoria(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addHistoria");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/historia', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the addInfoContacto operation.
     * @callback moduleapi/DefaultApi~addInfoContactoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Agregar nueva información de contacto
     * @param {module:model/V1InfoContactoBody} body 
     * @param {module:api/DefaultApi~addInfoContactoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addInfoContacto(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addInfoContacto");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/info_contacto', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the addMantenimientoInfo operation.
     * @callback moduleapi/DefaultApi~addMantenimientoInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Agregar nueva información de mantenimiento
     * @param {module:model/V1MantenimientoInfoBody} body 
     * @param {module:api/DefaultApi~addMantenimientoInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addMantenimientoInfo(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addMantenimientoInfo");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/mantenimiento_info', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the createPreguntaFrecuente operation.
     * @callback moduleapi/DefaultApi~createPreguntaFrecuenteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Agregar nueva pregunta frecuente
     * @param {module:model/V1PreguntaFrecuenteBody} body 
     * @param {module:api/DefaultApi~createPreguntaFrecuenteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createPreguntaFrecuente(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPreguntaFrecuente");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/pregunta_frecuente', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteCategoriaServicioById operation.
     * @callback moduleapi/DefaultApi~deleteCategoriaServicioByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Eliminar una categoría de servicio por ID
     * @param {Number} id ID de la categoría de servicio
     * @param {module:api/DefaultApi~deleteCategoriaServicioByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCategoriaServicioById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCategoriaServicioById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/categoria_servicio/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteEquipo operation.
     * @callback moduleapi/DefaultApi~deleteEquipoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Eliminar un equipo por ID
     * @param {Number} id ID del equipo
     * @param {module:api/DefaultApi~deleteEquipoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEquipo(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteEquipo");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/equipo/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteHistoria operation.
     * @callback moduleapi/DefaultApi~deleteHistoriaCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Eliminar una historia por ID
     * @param {Number} id ID de la historia
     * @param {module:api/DefaultApi~deleteHistoriaCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteHistoria(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteHistoria");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/historia/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteInfoContacto operation.
     * @callback moduleapi/DefaultApi~deleteInfoContactoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Eliminar información de contacto por ID
     * @param {Number} id ID de la información de contacto
     * @param {module:api/DefaultApi~deleteInfoContactoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteInfoContacto(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteInfoContacto");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/info_contacto/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteMantenimientoInfo operation.
     * @callback moduleapi/DefaultApi~deleteMantenimientoInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Eliminar información de mantenimiento por ID
     * @param {Number} id ID de la información de mantenimiento
     * @param {module:api/DefaultApi~deleteMantenimientoInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMantenimientoInfo(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteMantenimientoInfo");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/mantenimiento_info/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletePreguntaFrecuente operation.
     * @callback moduleapi/DefaultApi~deletePreguntaFrecuenteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Eliminar una pregunta frecuente por ID
     * @param {Number} id ID de la pregunta frecuente
     * @param {module:api/DefaultApi~deletePreguntaFrecuenteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePreguntaFrecuente(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePreguntaFrecuente");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/pregunta_frecuente/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllCategoriasServicio operation.
     * @callback moduleapi/DefaultApi~getAllCategoriasServicioCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtener todas las categorías de servicio
     * @param {module:api/DefaultApi~getAllCategoriasServicioCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAllCategoriasServicio(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/categoria_servicio', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllEquipos operation.
     * @callback moduleapi/DefaultApi~getAllEquiposCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtener todos los equipos
     * @param {module:api/DefaultApi~getAllEquiposCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAllEquipos(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/equipo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllHistorias operation.
     * @callback moduleapi/DefaultApi~getAllHistoriasCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtener todas las historias
     * @param {module:api/DefaultApi~getAllHistoriasCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAllHistorias(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/historia', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllInfoContacto operation.
     * @callback moduleapi/DefaultApi~getAllInfoContactoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtener toda la información de contacto
     * @param {module:api/DefaultApi~getAllInfoContactoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAllInfoContacto(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/info_contacto', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllMantenimientoInfo operation.
     * @callback moduleapi/DefaultApi~getAllMantenimientoInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtener toda la información de mantenimiento
     * @param {module:api/DefaultApi~getAllMantenimientoInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAllMantenimientoInfo(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/mantenimiento_info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllPreguntasFrecuentes operation.
     * @callback moduleapi/DefaultApi~getAllPreguntasFrecuentesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtener todas las preguntas frecuentes
     * @param {module:api/DefaultApi~getAllPreguntasFrecuentesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getAllPreguntasFrecuentes(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/pregunta_frecuente', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getCategoriaServicioById operation.
     * @callback moduleapi/DefaultApi~getCategoriaServicioByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtener una categoría de servicio por ID
     * @param {Number} id ID de la categoría de servicio
     * @param {module:api/DefaultApi~getCategoriaServicioByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCategoriaServicioById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCategoriaServicioById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/categoria_servicio/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getEquipoById operation.
     * @callback moduleapi/DefaultApi~getEquipoByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtener un equipo por ID
     * @param {Number} id ID del equipo
     * @param {module:api/DefaultApi~getEquipoByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getEquipoById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEquipoById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/equipo/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getHistoriaById operation.
     * @callback moduleapi/DefaultApi~getHistoriaByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtener una historia por ID
     * @param {Number} id ID de la historia
     * @param {module:api/DefaultApi~getHistoriaByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getHistoriaById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getHistoriaById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/historia/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getInfoContactoById operation.
     * @callback moduleapi/DefaultApi~getInfoContactoByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtener información de contacto por ID
     * @param {Number} id ID de la información de contacto
     * @param {module:api/DefaultApi~getInfoContactoByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInfoContactoById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInfoContactoById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/info_contacto/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getMantenimientoInfoById operation.
     * @callback moduleapi/DefaultApi~getMantenimientoInfoByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtener información de mantenimiento por ID
     * @param {Number} id ID de la información de mantenimiento
     * @param {module:api/DefaultApi~getMantenimientoInfoByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMantenimientoInfoById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMantenimientoInfoById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/mantenimiento_info/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getPreguntaFrecuenteById operation.
     * @callback moduleapi/DefaultApi~getPreguntaFrecuenteByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Obtener una pregunta frecuente por ID
     * @param {Number} id ID de la pregunta frecuente
     * @param {module:api/DefaultApi~getPreguntaFrecuenteByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPreguntaFrecuenteById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPreguntaFrecuenteById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/pregunta_frecuente/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the partialUpdateCategoriaServicio operation.
     * @callback moduleapi/DefaultApi~partialUpdateCategoriaServicioCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Actualizar parcialmente una categoría de servicio
     * @param {module:model/CategoriaServicioIdBody1} body 
     * @param {Number} id ID de la categoría de servicio
     * @param {module:api/DefaultApi~partialUpdateCategoriaServicioCallback} callback The callback function, accepting three arguments: error, data, response
     */
    partialUpdateCategoriaServicio(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling partialUpdateCategoriaServicio");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling partialUpdateCategoriaServicio");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/categoria_servicio/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the partialUpdateEquipo operation.
     * @callback moduleapi/DefaultApi~partialUpdateEquipoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Actualizar parcialmente un equipo
     * @param {module:model/EquipoIdBody1} body 
     * @param {Number} id ID del equipo
     * @param {module:api/DefaultApi~partialUpdateEquipoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    partialUpdateEquipo(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling partialUpdateEquipo");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling partialUpdateEquipo");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/equipo/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the partialUpdateHistoria operation.
     * @callback moduleapi/DefaultApi~partialUpdateHistoriaCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Actualizar parcialmente una historia
     * @param {module:model/HistoriaIdBody1} body 
     * @param {Number} id ID de la historia
     * @param {module:api/DefaultApi~partialUpdateHistoriaCallback} callback The callback function, accepting three arguments: error, data, response
     */
    partialUpdateHistoria(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling partialUpdateHistoria");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling partialUpdateHistoria");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/historia/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the partialUpdateInfoContacto operation.
     * @callback moduleapi/DefaultApi~partialUpdateInfoContactoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Actualizar parcialmente información de contacto por ID
     * @param {module:model/InfoContactoIdBody1} body 
     * @param {Number} id ID de la información de contacto
     * @param {module:api/DefaultApi~partialUpdateInfoContactoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    partialUpdateInfoContacto(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling partialUpdateInfoContacto");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling partialUpdateInfoContacto");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/info_contacto/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the partialUpdateMantenimientoInfo operation.
     * @callback moduleapi/DefaultApi~partialUpdateMantenimientoInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Actualizar parcialmente información de mantenimiento por ID
     * @param {module:model/MantenimientoInfoIdBody1} body 
     * @param {Number} id ID de la información de mantenimiento
     * @param {module:api/DefaultApi~partialUpdateMantenimientoInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    partialUpdateMantenimientoInfo(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling partialUpdateMantenimientoInfo");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling partialUpdateMantenimientoInfo");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/mantenimiento_info/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the partialUpdatePreguntaFrecuente operation.
     * @callback moduleapi/DefaultApi~partialUpdatePreguntaFrecuenteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Actualizar parcialmente una pregunta frecuente por ID
     * @param {module:model/PreguntaFrecuenteIdBody1} body 
     * @param {Number} id ID de la pregunta frecuente
     * @param {module:api/DefaultApi~partialUpdatePreguntaFrecuenteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    partialUpdatePreguntaFrecuente(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling partialUpdatePreguntaFrecuente");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling partialUpdatePreguntaFrecuente");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/pregunta_frecuente/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateHistoria operation.
     * @callback moduleapi/DefaultApi~updateHistoriaCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Actualizar o crear una historia
     * @param {module:model/HistoriaIdBody} body 
     * @param {Number} id ID de la historia
     * @param {module:api/DefaultApi~updateHistoriaCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateHistoria(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateHistoria");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateHistoria");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/historia/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateInfoContacto operation.
     * @callback moduleapi/DefaultApi~updateInfoContactoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Actualizar o crear información de contacto por ID
     * @param {module:model/InfoContactoIdBody} body 
     * @param {Number} id ID de la información de contacto
     * @param {module:api/DefaultApi~updateInfoContactoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateInfoContacto(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateInfoContacto");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateInfoContacto");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/info_contacto/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateMantenimientoInfo operation.
     * @callback moduleapi/DefaultApi~updateMantenimientoInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Actualizar o crear información de mantenimiento por ID
     * @param {module:model/MantenimientoInfoIdBody} body 
     * @param {Number} id ID de la información de mantenimiento
     * @param {module:api/DefaultApi~updateMantenimientoInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateMantenimientoInfo(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateMantenimientoInfo");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateMantenimientoInfo");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/mantenimiento_info/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateOrCreateCategoriaServicio operation.
     * @callback moduleapi/DefaultApi~updateOrCreateCategoriaServicioCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Actualizar o crear una categoría de servicio
     * @param {module:model/CategoriaServicioIdBody} body 
     * @param {Number} id ID de la categoría de servicio
     * @param {module:api/DefaultApi~updateOrCreateCategoriaServicioCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateOrCreateCategoriaServicio(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateOrCreateCategoriaServicio");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateOrCreateCategoriaServicio");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/categoria_servicio/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateOrCreateEquipo operation.
     * @callback moduleapi/DefaultApi~updateOrCreateEquipoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Actualizar o crear un equipo
     * @param {module:model/EquipoIdBody} body 
     * @param {Number} id ID del equipo
     * @param {module:api/DefaultApi~updateOrCreateEquipoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateOrCreateEquipo(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateOrCreateEquipo");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateOrCreateEquipo");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/equipo/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updatePreguntaFrecuente operation.
     * @callback moduleapi/DefaultApi~updatePreguntaFrecuenteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Actualizar o crear una pregunta frecuente por ID
     * @param {module:model/PreguntaFrecuenteIdBody} body 
     * @param {Number} id ID de la pregunta frecuente
     * @param {module:api/DefaultApi~updatePreguntaFrecuenteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updatePreguntaFrecuente(body, id, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePreguntaFrecuente");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePreguntaFrecuente");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/v1/pregunta_frecuente/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}